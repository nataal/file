# Generated by Django 2.0.1 on 2018-08-08 13:38

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mase.mase.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Utilisateur',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('telephone', models.CharField(blank=True, max_length=50)),
            ],
            options={
                'verbose_name_plural': 'utilisateurs',
                'verbose_name': 'utilisateur',
            },
            managers=[
                ('objects', mase.mase.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DocumentMase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('titre', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('document', models.FileField(upload_to='documents')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Entite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('raison_sociale', models.CharField(max_length=100)),
                ('adresse', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('ei', 'Entreprise intervenante'), ('eu', 'Entreprise utilisatrice'), ('of', 'Organisme de formation')], max_length=2)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EntrepriseIntervenante',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activite', models.CharField(choices=[('TCMSM', 'Tuyauterie, chaudronnerie, mécanique, soudure, maintenance industrielle'), ('EEAR', 'Électricité, électromécanique, automatisme, régulation'), ('B', 'Bâtiment'), ('TP', 'Travaux publics'), ('IBE', 'Ingénierie, bureau d’études'), ('ECI', 'Échafaudage, calorifuge, isolation'), ('LM', 'Levage, montage'), ('CI', 'Contrôle, inspection'), ('NITCCDEV', 'Nettoyage industriel et tertiaire, curage, collecte de déchets, espaces verts'), ('LTL', 'Logistique, transports, location'), ('GS', 'Gardiennage, sécurité'), ('TT', 'Travail temporaire'), ('D', 'Divers')], max_length=255)),
                ('effectif', models.CharField(blank=True, max_length=100)),
                ('ca', models.CharField(blank=True, max_length=25)),
                ('directeur', models.CharField(max_length=100)),
                ('contact_demarche', models.CharField(max_length=255)),
                ('organisation', models.CharField(blank=True, max_length=255)),
                ('relations_etablissements', models.TextField(blank=True)),
                ('sous_traitants_activites', models.CharField(blank=True, max_length=255)),
                ('intervention_industriels', models.CharField(blank=True, max_length=255)),
                ('periode_audit', models.CharField(blank=True, max_length=255)),
                ('demarche_management_qualite', models.BooleanField(default=False)),
                ('demarche_iso', models.BooleanField(default=False)),
                ('entite', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='entreprise_intervenante', to='mase.Entite')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EntrepriseUtilisatrice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activite', models.CharField(choices=[('TCMSM', 'Tuyauterie, chaudronnerie, mécanique, soudure, maintenance industrielle'), ('EEAR', 'Électricité, électromécanique, automatisme, régulation'), ('B', 'Bâtiment'), ('TP', 'Travaux publics'), ('IBE', 'Ingénierie, bureau d’études'), ('ECI', 'Échafaudage, calorifuge, isolation'), ('LM', 'Levage, montage'), ('CI', 'Contrôle, inspection'), ('NITCCDEV', 'Nettoyage industriel et tertiaire, curage, collecte de déchets, espaces verts'), ('LTL', 'Logistique, transports, location'), ('GS', 'Gardiennage, sécurité'), ('TT', 'Travail temporaire'), ('D', 'Divers')], max_length=255)),
                ('effectif', models.CharField(blank=True, max_length=100)),
                ('ca', models.CharField(blank=True, max_length=25)),
                ('directeur', models.CharField(max_length=100)),
                ('contact_demarche', models.CharField(max_length=255)),
                ('entite', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='entreprise_utilisatrice', to='mase.Entite')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Evenement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('nom', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('date', models.DateField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Formateur',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('nom', models.CharField(max_length=100)),
                ('prenom', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FormateursOrganismes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('formateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mase.Formateur')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Formation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('nom', models.CharField(max_length=100, unique=True)),
                ('contenu', models.TextField()),
                ('validite', models.IntegerField()),
                ('tav', models.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FormationIntervenant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('type', models.CharField(choices=[('r', 'Formation de recyclage'), ('i', 'Formation initiale')], max_length=1)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FormationsOrganismes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('validite', models.IntegerField()),
                ('formation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='formations_organismes', to='mase.Formation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Intervenant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=7, unique=True)),
                ('nom', models.CharField(max_length=100)),
                ('prenom', models.CharField(max_length=100)),
                ('sexe', models.CharField(choices=[('H', 'Masculin'), ('F', 'Feminin')], max_length=1)),
                ('date_naissance', models.DateField()),
                ('lieu_naissance', models.CharField(max_length=100)),
                ('num_gtis', models.CharField(max_length=100)),
                ('photo', models.ImageField(upload_to='photos')),
                ('ei', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intervenants', to='mase.EntrepriseIntervenante')),
                ('formations', models.ManyToManyField(through='mase.FormationIntervenant', to='mase.FormationsOrganismes')),
            ],
        ),
        migrations.CreateModel(
            name='OrganismeFormation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entite', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='organisme_formation', to='mase.Entite')),
                ('formateurs', models.ManyToManyField(through='mase.FormateursOrganismes', to='mase.OrganismeFormation')),
                ('formations', models.ManyToManyField(through='mase.FormationsOrganismes', to='mase.Formation')),
            ],
        ),
        migrations.AddField(
            model_name='formationsorganismes',
            name='organisme_formation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='formations_organismes', to='mase.OrganismeFormation'),
        ),
        migrations.AddField(
            model_name='formationintervenant',
            name='formation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='formations_intervenants', to='mase.FormationsOrganismes'),
        ),
        migrations.AddField(
            model_name='formationintervenant',
            name='intervenant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='formations_intervenants', to='mase.Intervenant'),
        ),
        migrations.AddField(
            model_name='formateursorganismes',
            name='organisme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mase.OrganismeFormation'),
        ),
        migrations.AddField(
            model_name='entrepriseintervenante',
            name='entreprise_utilisatrice',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entreprises_intervenantes', to='mase.EntrepriseUtilisatrice'),
        ),
        migrations.AddField(
            model_name='utilisateur',
            name='entite',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='utilisateur', to='mase.Entite'),
        ),
        migrations.AddField(
            model_name='utilisateur',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='utilisateur',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
